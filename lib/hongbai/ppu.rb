require_relative './ppu_address'

module Hongbai
  SCREEN_WIDTH = 256
  SCREEN_HEIGHT = 240

  # TODO:
  # ** Describe ppu address increment in a more concise way.
 
  class Ppu
    # Get palettes
    # This project uses a pal file generated by Bisqwit's generator.
    # https://bisqwit.iki.fi/utils/nespalette.php
    pal_path = File.expand_path("../palette.pal", __FILE__)
    pal = File.binread(pal_path).unpack("C*")
    PALETTES = pal.each_slice(192).to_a.map do |palette|
      palette.each_slice(3).to_a.map do |r, g, b|
        0xff << 24 | r << 16 | g << 8 | b
      end
    end

    def initialize(rom, driver, console)
      @console = console
      @renderer = driver
      vram_palette = Palette.new
      @vram = Vram.new(rom, vram_palette)
      @oam = Oam.new
      @oam2 = Oam2.new
      # A buffer that computes color priority and checks sprite 0 hit.
      @sprite_buffer = Output.new
      @bg_buffer = Array.new(8 * 2, 0)
      
      # Rendering latches
      @tile_num = 0xff
      @attribute = 0
      @tile_bitmap_low = 0

      # Registers
      # PPU_CTRL
      @vram_addr_increment = 1
      @sprite_pattern_table_addr = 0
      @bg_pattern_table_addr = 0
      @sprite_8x16_mode = false
      @sprite_height = 8
      @generate_vblank_nmi = false
      # PPU_ADDR & PPU_SCROLL
      @ppu_addr = Address.new
      @fine_x_offset = 0
      @toggle = false
      @ppu_data_read_buffer = 0
      # PPU_MASK
      @vga_palette = PALETTES[0]
      @color_functions = [vram_palette.inner, vram_palette.method(:grey_scale)]
      @color_function = @color_functions[0]
      @render_functions =               # sprite(1: enable) background(1: enable)
        [@ppu_addr.method(:palette),    # 00
         method(:render_bg),            # 01
         method(:render_sprite),        # 10
         method(:render_bg_and_sprite)] # 11
      @render_type = 0
      @render_function = @render_functions[@render_type]
      @left_most_render_function = @render_function
      @rendering_enabled = false
      # PPU_STATUS
      @ppu_status = 0
      @in_vblank = false

      @output = Array.new(SCREEN_WIDTH * SCREEN_HEIGHT, 0xffffffff)
      @output_offset = 0
      @scanline = 0
      @x = 0

      @main_loop = Fiber.new { run_main_loop }
      @even_frame = true

      # debug
      @trace = false
    end

    attr_reader :main_loop, :scanline
    attr_writer :trace

    def run_main_loop
      while true do
        # scanline 0 to 239, the visible scanlines
         
        # scanline 0
        # cycle 0 is skipped on odd cycles when rendering is enabled
        Fiber.yield if @even_frame || !@rendering_enabled
        visible_scanline
        @scanline += 1
        1.step(239) do
          # cycle 0, idle
          Fiber.yield
          visible_scanline
          @scanline += 1
        end

        # scanline 240
        idle_scanline

        # scanline 241
        vblank_scanline

        # scanline 242 to 260
        242.step(260) { idle_scanline }

        # pre-render line
        @renderer.display @output
        @output_offset = 0
        @scanline = 0
        @even_frame = !@even_frame
        @console.on_new_frame
        pre_render_scanline
      end
    end

    def read_oam_data(_addr)
      @oam.read
    end

    def read_ppu_status(_addr)
      @toggle = false
      ret = @ppu_status
      @ppu_status &= 0x7f # clear the vblank flag
      ret
    end

    def read_ppu_data(_addr)
      # TODO: I'd like to move the increment logic into Addr class, thus I can write:
      # addr = @ppu_addr.val
      # @ppu_addr.load_next_value
      if @rendering_enabled
        addr = @ppu_addr.tile
        @ppu_addr.coarse_x_increment
        @ppu_addr.y_increment
      else
        # Mirror down addresses greater than 0x3fff
        addr = @ppu_addr.to_i
        @ppu_addr.add @vram_addr_increment
      end
      val = @vram.read(addr)
      buffered = @ppu_data_read_buffer
      @ppu_data_read_buffer = val

      addr < 0x3f00 ? buffered : val
    end

    VRAM_ADDR_INC = [1, 32]

    def write_ppu_ctrl(_addr, val)
      @ppu_addr.tmp_nametable_x  = val[0]
      @ppu_addr.tmp_nametable_y  = val[1]
      @vram_addr_increment       = VRAM_ADDR_INC[val[2]]
      @sprite_pattern_table_addr = val[3] * 0x1000
      @bg_pattern_table_addr     = val[4] * 0x1000

      @sprite_8x16_mode = val[5] == 1
      @sprite_height = @sprite_8x16_mode ? 16 : 8

      vblank_orig = @generate_vblank_nmi
      @generate_vblank_nmi = val[7] == 1
      if !vblank_orig && @generate_vblank_nmi && @ppu_status[7] == 1
        @console.nmi = true
      end
    end

    def write_ppu_mask(_addr, val)
      # color emphasis
      @vga_palette = PALETTES[val >> 5]
      # grey scale
      @color_function = @color_functions[val[0]]
      # enable/disable backgroud/sprite rendering
      @render_type = (val >> 3) & 3
      @render_function = @render_functions[@render_type]
      # set left most 8 pixel rendering
      @left_most_render_function = @render_functions[(val >> 1) & @render_type]

      @rendering_enabled = @render_type != 0 && !@in_vblank
    end

    def write_oam_addr(_addr, val)
      @oam.addr = val
    end

    def write_oam_data(_addr, val)
      @oam.write val
    end

    def write_ppu_scroll(_addr, val)
      if @toggle # toggle is true, the second write
        @ppu_addr.tmp_fine_y_offset   = val & 7
        @ppu_addr.tmp_coarse_y_offset = val >> 3
      else
        @fine_x_offset = val & 7
        @ppu_addr.tmp_coarse_x_offset = val >> 3
      end
      @toggle = !@toggle
    end

    def write_ppu_addr(_addr, val)
      if @toggle
        @ppu_addr.update_lo val
        @ppu_addr.copy_tmp
      else
        @ppu_addr.update_hi val
      end
      @toggle = !@toggle
    end

    def write_ppu_data(_addr, val)
      if @rendering_enabled
        addr = @ppu_addr.tile
        @vram.write(addr, val)
        # TODO: If coincide with a standard VRAM address increment,
        # don't increase the relevant counter.
        @ppu_addr.coarse_x_increment
        @ppu_addr.y_increment
      else
        # Mirror down addresses greater than 0x3fff
        addr = @ppu_addr.to_i
        @vram.write(addr, val)
        @ppu_addr.add @vram_addr_increment
      end
    end

    def self.build_pattern(bitmap_low, bitmap_high, attribute)
      attribute <<= 2
      (0..7).map do |x|
        color = (bitmap_high[7 - x] << 1) | bitmap_low[7 - x]
        color == 0 ? 0 : attribute | color
      end
    end

    PATTERN_TABLE = (0..0xff).map do |bitmap_low|
      (0..0xff).map do |bitmap_high|
        (0..7).map {|attribute| build_pattern(bitmap_low, bitmap_high, attribute) }
      end
    end

    def self.to_8x16_sprite_tile_addr(tile_number, fine_y)
      (tile_number[0] << 12) + ((tile_number & 0xfe) << 4) + (fine_y[3] << 4) + (fine_y & 7)
    end

    SPRITE_16_ADDR = (0..0xff).map do |tile_number|
      (0..0xf).map {|fine_y| to_8x16_sprite_tile_addr(tile_number, fine_y) }
    end

    # Pre-compute attributes for every address in a nametable
    # with all 256 possible atribute bytes.
    #
    # Every 4*4 tiles share an attribute byte
    # ________________
    # |/|/|/|/|_|_|_|_
    # |/|/|/|/|_|_|_|_
    # |/|/|/|/|_|_|_|_
    # |/|/|/|/|_|_|_|_
    # |_|_|_|_|_|_|_|_
    # |_|_|_|_|_|_|_|_
    # |_|_|_|_|_|_|_|_
    # | | | | | | | |
    #
    # Every 2 bits of an arttribute byte controls a 2*2 corner of the group of
    # 4*4 tiles
    #
    # 7654 3210
    # |||| ||++- topleft corner
    # |||| ++--- topright corner
    # ||++ ----- bottomleft corner
    # ++-- ----- bottomright corner
    ATTR_TABLE = (0..0xff).map do |val|
      (0..0x3ff).map do |pos|
        y, x = pos.divmod(32)
        if y % 4 < 2
          if x % 4 < 2 # topleft
            val & 3
          else # topright
            (val >> 2) & 3
          end
        else
          if x % 4 < 2 # bottomleft
            (val >> 4) & 3
          else # topright
            (val >> 6) & 3
          end
        end
      end
    end

    private
      def idle_scanline
        0.step(340) { Fiber.yield }
      end

      def vblank_scanline
        Fiber.yield
        set_vblank_start
        @console.nmi = true if @generate_vblank_nmi
        1.step(340) { Fiber.yield }
      end

      def pre_render_scanline
        # cycle 0, idle
        Fiber.yield
        # cycle 1
        set_vblank_end
        1.step(256, 8) { tile_fetch_8_cycles {} }
        # still in cycle 256, fixme: should yield here
        @ppu_addr.y_increment if @rendering_enabled
        # cycle 257
        @ppu_addr.copy_x if @rendering_enabled
        257.step(280, 8) do
          sprite_fetch_8_cycles { dummy_sprite_fetch }
        end
        # Copy_y happends EVERY cycle from 280 to 304
        # This implementation just copies at cycle 281 and 305
        @ppu_addr.copy_y if @rendering_enabled
        281.step(304, 8) do
          sprite_fetch_8_cycles { dummy_sprite_fetch }
        end
        @ppu_addr.copy_y if @rendering_enabled
        305.step(320, 8) do
          sprite_fetch_8_cycles { dummy_sprite_fetch }
        end

        321.step(336, 8) do 
          tile_fetch_8_cycles { @bg_buffer.shift }
        end
        scanline_cycle_337_to_340
      end

      def visible_scanline
        # cycle 0 is not here
        # only the last 340 cycles of the 341 cycles in total
        @x = 0
        # cycle 1-8
        tile_fetch_8_cycles { draw_point @left_most_render_function[] }
        # cycle 9-64
        9.step(64, 8) do
          tile_fetch_8_cycles { draw_point @render_function[] }
        end
        # In fact this happens during cycle 1-64
        @oam2.init
        # cycle 65-256, with sprite evaluation
        65.step(256, 8) do
          tile_fetch_8_cycles { draw_point @render_function[] }
        end
        # still in cycle 256
        # FIXME: should yield here
        sprite_evaluation
        @ppu_addr.y_increment if @rendering_enabled
        # cycle 257-320, fetch sprite tiles for the next scanline
        scanline_cycle_257_to_320
        # cycle 321-336, fetch the first two tiles for the next scanline
        321.step(336, 8) do 
          tile_fetch_8_cycles { @bg_buffer.shift }
        end

        scanline_cycle_337_to_340
      end

      def tile_fetch_8_cycles
        # cycle 1
        yield
        Fiber.yield
        # cycle 2
        # read nametable byte
        yield
        tile_num = @vram.read(@ppu_addr.tile)
        Fiber.yield
        # cycle 3
        yield
        Fiber.yield
        # cycle 4
        # read attr byte
        yield
        byte = @vram.read(@ppu_addr.attribute)
        attribute = ATTR_TABLE[byte][@ppu_addr.pos_in_nametable]
        Fiber.yield
        # cycle 5
        yield
        Fiber.yield
        # cycle 6
        # get tile low
        yield
        addr = @bg_pattern_table_addr + (tile_num << 4) + @ppu_addr.fine_y_offset
        bitmap_low = @vram.read(addr)
        Fiber.yield
        # cycle 7
        yield
        Fiber.yield
        # cycle 8
        # get tile high
        yield
        bitmap_high = @vram.read(addr + 8)
        pattern = PATTERN_TABLE[bitmap_low][bitmap_high][attribute]
        # reload shift register
        @bg_buffer[8, 8] = pattern
        @ppu_addr.coarse_x_increment if @rendering_enabled
        Fiber.yield
      end

      def sprite_fetch_8_cycles
        Fiber.yield
        Fiber.yield
        Fiber.yield
        Fiber.yield
        yield
        Fiber.yield
        Fiber.yield
        Fiber.yield
        Fiber.yield
      end

      def scanline_cycle_257_to_320
        @ppu_addr.copy_x if @rendering_enabled
        @sprite_buffer.clear
        # cycel 257 to 264
        sprite_fetch_8_cycles do
          @oam2.peek ? sprite_fetch(@oam2.has_sprite_zero) : dummy_sprite_fetch
        end

        265.step(320, 8) do
          sprite_fetch_8_cycles do
            @oam2.peek ? sprite_fetch(false) : dummy_sprite_fetch
          end
        end
      end

      def sprite_fetch(has_sprite_zero)
        y, tile, attrs, x = @oam2.take_one
        y_inter = @scanline - y
        attr    = (attrs & 3) + 4
        prior   = attrs[5] == 0
        flip_h  = attrs[6] == 1
        flip_v  = attrs[7] == 1
        if !@sprite_8x16_mode
          # 8*8 sprite mode
          y_inter = 7 - y_inter if flip_v
          addr = @sprite_pattern_table_addr + (tile << 4) + y_inter
        else
          # 8*16 sprite mode
          y_inter = 15 - y_inter if flip_v
          addr = SPRITE_16_ADDR[tile][y_inter]
        end

        bitmap_low = @vram.read(addr)
        bitmap_high = @vram.read(addr + 8)
        colors = PATTERN_TABLE[bitmap_low][bitmap_high][attr]
        colors = colors.reverse if flip_h
        @sprite_buffer.push_sprite(colors, x, prior, has_sprite_zero)
      end

      def dummy_sprite_fetch
        addr = @sprite_8x16_mode ? 0x1fe0 : 0xff0 + @sprite_pattern_table_addr
        @vram.read addr
      end

      def scanline_cycle_337_to_340
        #read_nametable_byte
        #read_nametable_byte
        337.step(340) { Fiber.yield }
      end

      def draw_point(color_index)
        @output[@output_offset] = @vga_palette[@color_function[color_index]]
        @output_offset += 1
        @bg_buffer.shift
        @x += 1
      end

      def render_bg_and_sprite
        bg_color = @bg_buffer[@fine_x_offset]
        if @sprite_buffer.push_point(bg_color, @x)
          set_sprite_zero_hit
        end
        @sprite_buffer[@x]
      end

      def render_bg
        @bg_buffer[@fine_x_offset]
      end

      def render_sprite
        @sprite_buffer[@x]
      end

      # Ppu -> nil
      def sprite_evaluation
        # TODO: use OAMADDR to start
        y = @oam[0]
        @oam2.insert(y)
        if sprite_on_scanline(y)
          1.step(3) { |i| @oam2.push(@oam[i]) }
          @oam2.has_sprite_zero = true
        end

        n = 1
        while true
          y = @oam[n * 4]
          @oam2.insert(y)
          if sprite_on_scanline(y)
            1.step(3) { |i| @oam2.push(@oam[n * 4 + i]) }
          end
          n += 1
          return if n == 64

          break if @oam2.full?
        end

        m = 0
        while n < 64
          y = @oam[n * 4 + m]
          if sprite_on_scanline(y)
            set_sprite_overflow
            break
          else
            n += 1
            # the sprite overflow bug
            m = (m + 1) % 4
          end
        end
      end

      # Ppu -> Integer -> Bool
      def sprite_on_scanline(sprite_y_offset)
        sprite_y_offset <= @scanline &&
          sprite_y_offset + @sprite_height > @scanline
      end

      def set_sprite_zero_hit
        @ppu_status |= 0x40
      end

      def set_sprite_overflow
        @ppu_status |= 0x20
      end

      def set_vblank_start
        # set_in_vblank to 1
        @ppu_status |= 0x80
        @in_vblank = true
        @rendering_enabled = false
      end

      # Ppu -> Nil
      def set_vblank_end
        # set in vblank to 0
        @ppu_status &= 0x7f
        @in_vblank = false
        @rendering_enabled = @render_type != 0
        # clear sprite_zero_hit flag
        @ppu_status &= 0xbf
        # clear sprite overflow flag
        @ppu_status &= 0xdf
      end
  end

  class Oam
    def initialize
      @arr = Array.new(256, 0xff)
      @addr = 0
    end

    attr_writer :addr

    def read
      @arr[@addr]
    end

    def write(val)
      @arr[@addr] = val
      @addr = (@addr + 1) & 0xff
    end

    def [](n)
      @arr[n]
    end

    def []=(n, x)
      @arr[n] = x
    end
  end

  class Oam2
    def initialize
      @arr = Array.new(8 * 4, 0xff)
      @cursor = 0
      @openslot = 0
      @push_count = 0
      @has_sprite_zero = false
      @read_offset = 1
    end

    attr_accessor :has_sprite_zero

    def init
      @arr.fill 0xff
      @cursor = 0
      @openslot = 0
      @push_count = 0
      @has_sprite_zero = false
      @read_offset = 0
    end

    def to_s
      @arr.each_slice(4).to_a.inspect
    end

    def peek
      @push_count != 0
    end

    def take_one
      i = @read_offset
      @read_offset += 4
      @push_count -= 3
      return *@arr[i, 4]
    end

    # Oam2 -> Integer -> Nil
    def push(n)
      @arr[@cursor] = n
      @cursor += 1
      @openslot = @cursor
      @push_count += 1
    end

    # Oam2 -> Integer -> Nil
    # overide previous inserted element, if no push happened after that insertion
    def insert(n)
      @arr[@openslot] = n
      @cursor = @openslot + 1
    end

    # Oam2 -> Bool
    def full?
      @push_count >= 24 # 8 sprites, each 3 pushes
    end
  end

  class Vram
    def initialize(rom, palette)
      @rom = rom
      @palette = palette

      @read_map = Array.new(0x4000)
      @write_map = Array.new(0x4000)
      init_memory_map
    end

    attr_reader :palette

    def init_memory_map
      # Memory map
      # $0000 - $1fff pattern table (rom)
      # $2000 - $2fff 4 nametables
      # $3000 - $3eff mirrors of $2000 - $2eff
      (0..0x3eff).each do |i|
        @read_map[i] = @rom.chr_read_method(i)
        @write_map[i] = @rom.chr_write_method(i)
      end
      # $3f00 - $3f1f palette
      # $3f20 - $3fff mirrors of $3f00 - $3f1f
      (0x3f00..0x3fff).each do |i|
        @read_map[i] = @palette.method(:read)
        @write_map[i] = @palette.write_method(i)
      end
    end

    def read(addr)
      @read_map[addr][addr]
    end

    def write(addr, val)
      @write_map[addr][addr, val]
    end
  end

  class Output
    Item = Struct.new(:color, :from_sprite_0, :above_bg)

    def initialize
      @items = Array.new(SCREEN_WIDTH) { Item.new(0, nil, nil) }
    end

    attr_accessor :may_hit_sprite_0

    def clear
      n = 0
      while n < 256
        i = @items[n]
        i.color = 0 
        i.from_sprite_0 = nil
        i.above_bg = nil
        n += 1
      end
    end

    # Output -> Integer -> ColorIndex
    def [](n)
      @items[n].color
    end

    def push_sprite(pattern, x_offset, above_bg, from_sprite_0)
      i = x_offset
      n = 0
      while n < 8
        c = pattern[n]
        item = @items[i]
        if item && item.color == 0
          item.color = c
          item.from_sprite_0 = from_sprite_0
          item.above_bg = above_bg
        end
        i += 1
        n += 1
      end
    end

    def push_point(color, x_offset)
      item = @items[x_offset]
      hit = item.from_sprite_0 && color != 0 && item.color != 0 && x_offset != 255
      item.color = color unless item.color != 0 && item.above_bg || color == 0
      hit
    end
  end

  class Palette
    MIRRORS = [0x00, 0x04, 0x08, 0x0c, 0x10, 0x14, 0x18, 0x1c] 

    def initialize
      # runs from $3f00 to $3f1f, 32 bytes
      @inner = Array.new(32, 0x3f)
    end

    attr_reader :inner

    def grey_scale(i)
      @inner[i] & 0x30
    end

    def read(addr)
      @inner[addr & 0x1f]
    end

    def write(addr, val)
      @inner[addr & 0x1f] = val & 0x3f
    end

    def write_mirror(addr, val)
      @inner[addr & 0xf] = val & 0x3f
      @inner[(addr & 0xf) + 0x10] = val & 0x3f
    end

    def write_method(i)
      MIRRORS.include?(i & 0x1f) ? method(:write_mirror) : method(:write)
    end
  end
end
